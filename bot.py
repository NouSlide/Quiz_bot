from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
import sqlite3 as sq
import re
import buttons as but

from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from database import create_profile, edit_profile
import database


async def on_startup(_):
    await database.db_start()


bot = Bot('6343794582:AAEIwCa_GD7KxO8W4KkmdFIkJqgpxPH-fUM')
dp = Dispatcher(bot, storage=MemoryStorage())


db = sq.connect('profile.db')
cur = db.cursor()


class ProfileStatesGroup(StatesGroup):

    photo = State()
    name = State()


class QuizzesStatesGroup(StatesGroup):

    main_question = State()
    first_answer = State()
    second_answer = State()
    third_answer = State()
    fourth_answer = State()
    correct_option = State()
    choose_answer = State()


def choice_is_true_answer() -> ReplyKeyboardMarkup:
    cita = ReplyKeyboardMarkup(resize_keyboard=True)
    rkm1 = KeyboardButton('1')
    rkm2 = KeyboardButton('2')
    rkm3 = KeyboardButton('3')
    rkm4 = KeyboardButton('4')
    cita.row(rkm1, rkm2)
    cita.row(rkm3, rkm4)

    return cita


def cancel_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('/–í—ã–π—Ç–∏'))

    return kb


def cancel_create_question() -> ReplyKeyboardMarkup:
    new_kb = ReplyKeyboardMarkup(resize_keyboard=True)
    new_kb.add(KeyboardButton('/–û—Ç–º–µ–Ω–∞'))

    return new_kb


@dp.message_handler(commands=['–í—ã–π—Ç–∏'], state='*')
async def cancel(message: types.Message, state: FSMContext):
    if state is None:
        return

    await state.finish()
    await message.answer('–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–æ–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ üôÖ‚Äç‚ôÇÔ∏è', reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(commands=['–û—Ç–º–µ–Ω–∞'], state='*')
async def cancel_create(message: types.Message, state: FSMContext):
    if state is None:
        return

    cur.execute("SELECT user_id FROM people WHERE user_id=?", (message.from_user.id,))
    profile = cur.fetchall()
    if message.from_user.id in profile:
        del profile[message.from_user.id]
    await state.finish()
    await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ üôÖ‚Äç‚ôÇÔ∏è', reply_markup=types.ReplyKeyboardRemove())


async def show_all_users(callback: types.CallbackQuery, numbers: list) -> None:
    for user in numbers:
        await bot.send_photo(chat_id=callback.message.chat.id,
                             photo=user[1],
                             caption=f'–ò–º—è: <b>{user[2]}</b>\nID: <b>{user[0]}</b>',
                             parse_mode='HTML')


@dp.message_handler(commands=['start'])
async def start(message: types.Message) -> None:
    main_text = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Victor Botüíú –°–æ–∑–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ—Ö–æ–¥–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ üëê'
    await message.answer(main_text, reply_markup=but.mankind)


answer_mapping = {
    1: 'main_question',
    2: 'first_answer',
    3: 'second_answer',
    4: 'third_answer',
    5: 'fourth_answer'
}


def generate_callback_data(question_id, answer_index):
    return f"answer_{question_id}_{answer_index}"


current_question = 1


async def send_question(user_id, state):
    random_question = await database.get_all_quest('questions')
    if random_question:
        question_text = random_question[answer_mapping[1]]
        options = [
            random_question[answer_mapping[2]],
            random_question[answer_mapping[3]],
            random_question[answer_mapping[4]],
            random_question[answer_mapping[5]]
        ]

        mnk = InlineKeyboardMarkup(row_width=1)
        for answer_index, option_text in enumerate(options):
            callback_data = generate_callback_data(random_question['question_id'], answer_index + 1)
            button = InlineKeyboardButton(option_text, callback_data=callback_data)
            mnk.add(button)

        await bot.send_message(user_id, question_text, reply_markup=mnk)
    else:
        await bot.send_message(user_id, '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')


@dp.callback_query_handler(text='quiz')
async def start_quiz(callback_query: types.CallbackQuery):
    # cur.execute("SELECT id FROM active_users WHERE id=?", (callback_query.from_user.id,))
    # user_passed = cur.fetchall()
    # if not user_passed:
    global current_question
    current_question = 1
    await send_question(callback_query.from_user.id, current_question)
    # else:
    #     await bot.send_message(callback_query.from_user.id, '–í—Ç–æ—Ä–æ–π —Ä–∞–∑ –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –Ω–µ–ª—å–∑—è ü•≤')
    await callback_query.message.delete()

count = 0
emoji = ''


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith("answer"))
async def process_answer(callback_query: types.CallbackQuery, state):
    global current_question, count, emoji
    _, question_index, answer_index = callback_query.data.split("_")
    question_index = int(question_index)
    answer_index = int(answer_index)

    correct_answer_index = database.get_correct_answer_index(question_index)

    if answer_index == correct_answer_index:
        count += 1
    else:
        await callback_query.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!')

    if count == 0:
        emoji = 'üò≠'
    elif count == 1:
        emoji = 'üò¢'
    elif count == 2:
        emoji = 'üôÅ'
    elif count == 3:
        emoji = 'üòê'
    elif count == 4:
        emoji = 'üòå'
    else:
        emoji = 'üòé'

    text = f'–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. {count} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞ –∏–∑ 5 {emoji}'

    await callback_query.message.delete()

    current_question += 1
    if current_question <= 5:  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é, —á—Ç–æ —É –≤–∞—Å 5 –≤–æ–ø—Ä–æ—Å–æ–≤
        await send_question(callback_query.from_user.id, current_question)
    else:
        # await database.create_active(user_id=callback_query.from_user.id)
        count = 0
        await bot.send_message(callback_query.from_user.id, text)


@dp.callback_query_handler(text='allProfile')
async def get_all_users(callback: types.CallbackQuery):
    numbers = await database.get_all_users()

    if not numbers:
        await callback.message.delete()
        await callback.message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç üò∂‚Äçüå´Ô∏è')
        return await callback.answer()

    await callback.message.delete()
    await show_all_users(callback, numbers)
    await callback.answer()


@dp.callback_query_handler(text='createAnswer')
async def add_new_quiz(message: types.Message):
    cur.execute("SELECT user_id FROM people WHERE user_id=?", (message.from_user.id,))
    user = cur.fetchall()
    if user:
        await bot.send_message(message.from_user.id, '–û—Ç–ª–∏—á–Ω–æ!üëå –î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞',
                               reply_markup=cancel_create_question())
        await QuizzesStatesGroup.main_question.set()
    else:
        await bot.send_message(message.from_user.id, '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üôÖ‚Äç‚ôÇÔ∏è')


@dp.message_handler(lambda message, pattern = re.compile(r'^[–∞-—è–ê-–Øa-zA-Z 0-9\u0080-\U0010FFFF?!+",.%¬´¬ª‚Ä¢-]+$'): not pattern.match(message.text), state=QuizzesStatesGroup.main_question)
async def check_quest(message: types.Message):
    await message.answer('–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã ‚ùå')


@dp.message_handler(state=QuizzesStatesGroup.main_question)
async def load_main_quest(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as news_data:
        news_data['main_question'] = message.text

    await message.reply('–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞')
    await QuizzesStatesGroup.next()


@dp.message_handler(lambda message, pattern = re.compile(r'^[–∞-—è–ê-–Øa-zA-Z 0-9\u0080-\U0010FFFF?!+",.%¬´¬ª‚Ä¢-]+$'): not pattern.match(message.text), state=QuizzesStatesGroup.first_answer)
async def check_first_answer(message: types.Message):
    await message.answer('–¢–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã ‚ùå')


@dp.message_handler(state=QuizzesStatesGroup.first_answer)
async def load_first_variant(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as news_data:
        news_data['first_answer'] = message.text

    await message.reply('–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –≤—Ç–æ—Ä–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞')
    await QuizzesStatesGroup.next()


@dp.message_handler(lambda message, pattern = re.compile(r'^[–∞-—è–ê-–Øa-zA-Z 0-9\u0080-\U0010FFFF?!+",.%¬´¬ª‚Ä¢-]+$'): not pattern.match(message.text), state=QuizzesStatesGroup.second_answer)
async def check_second_answer(message: types.Message):
    await message.answer('–¢–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã ‚ùå')


@dp.message_handler(state=QuizzesStatesGroup.second_answer)
async def load_second_variant(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as news_data:
        news_data['second_answer'] = message.text

    await message.reply('–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞')
    await QuizzesStatesGroup.next()


@dp.message_handler(lambda message, pattern = re.compile(r'^[–∞-—è–ê-–Øa-zA-Z 0-9\u0080-\U0010FFFF?!+",.%¬´¬ª‚Ä¢-]+$'): not pattern.match(message.text), state=QuizzesStatesGroup.third_answer)
async def check_third_answer(message: types.Message):
    await message.answer('–¢–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã ‚ùå')


@dp.message_handler(state=QuizzesStatesGroup.third_answer)
async def load_third_variant(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as news_data:
        news_data['third_answer'] = message.text

    await message.reply('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞')
    await QuizzesStatesGroup.next()


@dp.message_handler(lambda message, pattern = re.compile(r'^[–∞-—è–ê-–Øa-zA-Z 0-9\u0080-\U0010FFFF?!+",.%¬´¬ª‚Ä¢-]+$'): not pattern.match(message.text), state=QuizzesStatesGroup.fourth_answer)
async def check_fourth_answer(message: types.Message):
    await message.answer('–¢–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã ‚ùå')


@dp.message_handler(state=QuizzesStatesGroup.fourth_answer)
async def load_fourth_answer(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as news_data:
        news_data['fourth_answer'] = message.text
        rkm = ReplyKeyboardMarkup(resize_keyboard=True)
        rm1 = KeyboardButton(news_data['first_answer'])
        rm2 = KeyboardButton(news_data['second_answer'])
        rm3 = KeyboardButton(news_data['third_answer'])
        rm4 = KeyboardButton(news_data['fourth_answer'])
        rkm.add(rm1, rm2, rm3, rm4)

    await message.reply('–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞', reply_markup=choice_is_true_answer())
    await QuizzesStatesGroup.next()


@dp.message_handler(lambda message, pattern = re.compile(r'^[1-4]$'): not pattern.match(message.text), state=QuizzesStatesGroup.correct_option)
async def check_correct_option(message: types.Message):
    await message.answer('‚ùå –£–∫–∞–∂–∏ —Ü–∏—Ñ—Ä—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: 1, 2, 3 –∏–ª–∏ 4')


@dp.message_handler(state=QuizzesStatesGroup.correct_option)
async def process_correct_option(message: types.Message, state: FSMContext):
    async with state.proxy() as news_data:
        news_data['correct_option'] = int(message.text)

    await message.delete()
    await database.create_quiz(state)
    await message.answer('–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω ‚úÖ', reply_markup=types.ReplyKeyboardRemove())
    await state.finish()


@dp.callback_query_handler(text='createProfile')
async def check_user_from_db(message: types.Message):
    cur.execute("SELECT user_id FROM people WHERE user_id=?", (message.from_user.id,))
    user = cur.fetchall()
    if not user:
        await bot.send_message(message.from_user.id, '–û—Ç–ª–∏—á–Ω–æ!üëå –î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è', reply_markup=cancel_kb())
        await ProfileStatesGroup.photo.set()
    else:
        await bot.send_message(message.from_user.id, 'üôÖ‚Äç‚ôÇÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')


@dp.message_handler(lambda message: not message.photo, state=ProfileStatesGroup.photo)
async def check_photo(message: types.Message):
    await message.reply('–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ ‚ùå')


@dp.message_handler(content_types=['photo'], state=ProfileStatesGroup.photo)
async def load_photo(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id

    await message.delete()
    await message.answer('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –Ω–∏–∫–Ω–µ–π–º')
    await ProfileStatesGroup.next()


@dp.message_handler(lambda message: message.text.isdigit(), state=ProfileStatesGroup.name)
async def check_name(message: types.Message):
    await message.delete()
    await message.answer('–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä ‚ùå')


@dp.message_handler(state=ProfileStatesGroup.name)
async def load_name(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['name'] = message.text
        await create_profile(user_id=message.from_user.id)
        await bot.send_photo(message.from_user.id, photo=data['photo'], caption=f"–ò–º—è: {data['name']}\nID: {message.from_user.id}")

    await message.delete()
    await edit_profile(state, user_id=message.from_user.id)
    await message.answer('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω ‚úÖ')
    await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
